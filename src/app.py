
import streamlit as st
import os
from streamlit_folium import folium_static
from redis_sr import RedisSR
from shapely.wkt import loads
import geopandas as gpd

def set_page_config():
    st.set_page_config(layout="wide", page_title="Monitoramento de chuvas no sistema de transportes")
    st.markdown("# Monitoramento de chuvas no sistema de transportes")
    st.markdown(
        """Abaixo voc√™ pode monitorar as rotas de √¥nibus,
        volume de precipita√ß√£o e poss√≠veis pontos de
        impacto na opera√ß√£o em √°reas de aprox. 100m2.""")
        
    st.markdown("""
    > üìç Ponteiros mostram o **N√∫mero de ve√≠culos parados ou fora de rota**

    > üåßÔ∏è Escala de cores mostra a **Estimativa de volume de
    precipita√ß√£o (mm) na √∫ltima 1 hora** (segundo a esta√ß√£o mais pr√≥xima
    da √°rea).
    """)

    st.button("Atualizar dados")

def render_map_data(mapa=None, df_gps=None):
    map_data = folium_static(mapa, height=600, width=1200)

    df_gps['total_veiculo_problema'] = (
      df_gps.indicador_veiculo_parado_10_min + 
      df_gps.indicador_veiculo_parado_30_min +
      df_gps.indicador_veiculo_parado_1_hora +
      df_gps.indicador_veiculo_fora_rota_10_min + 
      df_gps.indicador_veiculo_fora_rota_30_min +
      df_gps.indicador_veiculo_fora_rota_1_hora)
    
    new_cols = {
        'servico': 'üöç Servi√ßo',
        'total_veiculo_problema': 'Total Ve√≠culos Parados ou Desviados (at√© 1h)',
        'indicador_veiculo_parado_10_min': 'üõë Ve√≠culos parados 10 min',
        'indicador_veiculo_parado_30_min': 'üõë Ve√≠culos parados 30 min',
        'indicador_veiculo_parado_1_hora': 'üõë Ve√≠culos parados 1 hora',
        'indicador_veiculo_fora_rota_10_min': "‚§¥Ô∏è Ve√≠culos desviados 10 min:",
        'indicador_veiculo_fora_rota_30_min': "‚§¥Ô∏è Ve√≠culos desviados 30 min:",
        'indicador_veiculo_fora_rota_1_hora': "‚§¥Ô∏è Ve√≠culos desviados 1 hora:"
    }

    st.dataframe(
        df_gps[list(new_cols)]
        .rename(columns=new_cols)
        .groupby(['üöç Servi√ßo'])
        .sum([i for i in new_cols.values() if i != 'üöç Servi√ßo'])
        .sort_values(by=['Total Ve√≠culos Parados ou Desviados (at√© 1h)'], ascending=False)
    )

def main():
    set_page_config()
    redis = RedisSR.from_url(os.getenv('CACHE_OPERACAO_CHUVA'))
    last_update = redis.get('last_update')
    last_update_rain = redis.get('last_rain_update')
    try:        
        mapa = redis.get('last_map')
        df_gps = redis.get('last_df_gps')
        render_map_data(mapa=mapa, df_gps=df_gps)
        st.markdown(f"√öltima atualiza√ß√£o: {last_update} (GPS); {last_update_rain} (precipita√ß√£o - Alerta Rio)")          
        redis.set('last_successful_map', mapa)
        redis.set(
            'last_successful_render', 
            last_update)
        redis.set(
            'last_successful_df_gps', 
            df_gps)
    except:
        mapa = redis.get('last_successful_map')
        df_gps = redis.get('last_successful_df_gps')
        render_map_data(mapa=mapa, df_gps=df_gps)
        st.markdown(f"√öltima atualiza√ß√£o: {last_update}")

if __name__ == '__main__':
    main()
